name: 🚀 Deploy Cloudflare Pages

on:
  push:
    branches: [main]
    paths:
      - 'public/**'
      - 'functions/**'
      - 'cloudflare/**'
      - 'wrangler.toml'
      - '.github/workflows/deploy-web-interface.yml'
  pull_request:
    branches: [main]
    paths:
      - 'public/**'
      - 'functions/**'
      - 'cloudflare/**'
      - 'wrangler.toml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Validate Cloudflare configuration
        run: |
          # 检查wrangler.toml配置
          if [ -f "wrangler.toml" ]; then
            echo "✅ wrangler.toml found"
            wrangler whoami || echo "⚠️ Not logged in to Cloudflare"
          else
            echo "❌ wrangler.toml not found"
            exit 1
          fi

      - name: Validate Functions syntax
        run: |
          # 检查Functions语法
          if [ -d "functions" ]; then
            echo "✅ Functions directory found"
            for file in functions/**/*.js; do
              if [ -f "$file" ]; then
                echo "Checking $file..."
                node -c "$file" || echo "⚠️ Syntax error in $file"
              fi
            done
          fi

      - name: Validate Worker syntax
        run: |
          # 检查Worker语法
          if [ -f "cloudflare/scheduled-worker.js" ]; then
            echo "✅ Worker file found"
            node -c "cloudflare/scheduled-worker.js" || echo "⚠️ Syntax error in Worker"
          fi

  # Cloudflare Pages部署
  deploy-pages:
    needs: quality-check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Deploy to Cloudflare Pages (Preview)
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview')
        run: |
          wrangler pages deploy public --project-name ip-purity-checker --compatibility-date 2024-01-01
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy to Cloudflare Pages (Production)
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
        run: |
          wrangler pages deploy public --project-name ip-purity-checker --compatibility-date 2024-01-01 --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  # Cloudflare Workers部署
  deploy-workers:
    needs: quality-check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Deploy Cloudflare Workers
        run: |
          wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  # 部署后测试
  post-deployment-test:
    needs: [deploy-pages, deploy-workers]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-pages.result == 'success' || needs.deploy-workers.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Wait for deployment
        run: sleep 60

      - name: Test Cloudflare Pages deployment
        run: |
          # 测试Cloudflare Pages部署
          PAGES_URL="https://ip-purity-checker.pages.dev"

          echo "Testing Pages deployment at: $PAGES_URL"

          # 测试首页
          if curl -f -s "$PAGES_URL" > /dev/null; then
            echo "✅ Pages homepage test passed"
          else
            echo "❌ Pages homepage test failed"
          fi

          # 测试订阅管理器
          if curl -f -s "$PAGES_URL/subscription-manager.html" > /dev/null; then
            echo "✅ Subscription manager test passed"
          else
            echo "❌ Subscription manager test failed"
          fi

          # 测试API Functions
          API_RESPONSE=$(curl -s "$PAGES_URL/api/check-ip?ip=8.8.8.8" || echo "")
          if echo "$API_RESPONSE" | grep -q '"ip"'; then
            echo "✅ API Functions test passed"
            echo "Response: $API_RESPONSE"
          else
            echo "⚠️ API Functions test failed or not ready"
            echo "Response: $API_RESPONSE"
          fi
        continue-on-error: true

      - name: Test Cloudflare Workers deployment
        run: |
          # 注意：Worker URL需要根据实际账户ID调整
          echo "⚠️ Worker testing requires account-specific URL"
          echo "Please test manually at: https://ip-purity-checker.YOUR_ACCOUNT.workers.dev"
        continue-on-error: true

  # 通知
  notify:
    needs: [deploy-pages, deploy-workers, post-deployment-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Cloudflare 部署总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**部署时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-pages.result }}" == "success" ]; then
            echo "✅ **Cloudflare Pages部署**: 成功" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Pages访问地址**: https://ip-purity-checker.pages.dev" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Cloudflare Pages部署**: 失败" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy-workers.result }}" == "success" ]; then
            echo "✅ **Cloudflare Workers部署**: 成功" >> $GITHUB_STEP_SUMMARY
            echo "⚙️ **Worker服务**: 定时任务已部署" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Cloudflare Workers部署**: 失败" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.post-deployment-test.result }}" == "success" ]; then
            echo "✅ **部署测试**: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **部署测试**: 部分失败或跳过" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 可用功能" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 单IP检测和批量检测" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 安全的订阅链接管理" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 订阅链接解析和检测" >> $GITHUB_STEP_SUMMARY
          echo "- ⚙️ 每日自动Clash配置生成" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 详细的检测报告" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 响应式Web界面" >> $GITHUB_STEP_SUMMARY
          echo "- ⏰ 定时任务自动检测" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 下一步操作" >> $GITHUB_STEP_SUMMARY
          echo "1. 配置API密钥: \`wrangler secret put PROXYCHECK_API_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "2. 配置IPinfo Token: \`wrangler secret put IPINFO_TOKEN\`" >> $GITHUB_STEP_SUMMARY
          echo "3. 访问订阅管理器添加私人订阅链接" >> $GITHUB_STEP_SUMMARY
          echo "4. 测试定时任务功能" >> $GITHUB_STEP_SUMMARY
