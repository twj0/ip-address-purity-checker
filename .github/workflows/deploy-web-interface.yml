name: Deploy Web Interface

on:
  push:
    branches: [main]
    paths:
      - 'public/**'
      - 'api/**'
      - 'vercel.json'
      - '.github/workflows/deploy-web-interface.yml'
  pull_request:
    branches: [main]
    paths:
      - 'public/**'
      - 'api/**'
      - 'vercel.json'
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'vercel'
        type: choice
        options:
          - vercel
          - cloudflare-pages
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r api/requirements.txt
          pip install flake8 black

      - name: Code formatting check
        run: |
          black --check api/
        continue-on-error: true

      - name: Lint check
        run: |
          flake8 api/ --max-line-length=100 --ignore=E203,W503
        continue-on-error: true

      - name: API syntax check
        run: |
          python -m py_compile api/check-ip.py
          python -m py_compile api/check-subscription.py

      - name: Run deployment diagnostic
        run: |
          python scripts/diagnose_deployment.py
        continue-on-error: true

  # Vercel部署
  deploy-vercel:
    needs: quality-check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_target == 'vercel')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview')
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel (Production)
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
        run: |
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Set environment variables
        if: github.event_name == 'push'
        run: |
          if [ ! -z "${{ secrets.IPINFO_TOKEN }}" ]; then
            echo "${{ secrets.IPINFO_TOKEN }}" | vercel env add IPINFO_TOKEN production --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} || true
          fi

  # Cloudflare Pages部署
  deploy-cloudflare:
    needs: quality-check
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_target == 'cloudflare-pages'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Create Pages Function
        run: |
          mkdir -p public/functions
          cat > public/functions/api/[[path]].js << 'EOF'
          // Cloudflare Pages Functions for API routes
          export async function onRequest(context) {
            const { request, env } = context;
            const url = new URL(request.url);
            
            // CORS处理
            if (request.method === 'OPTIONS') {
              return new Response(null, {
                status: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                  'Access-Control-Allow-Headers': 'Content-Type, X-IPInfo-Token'
                }
              });
            }
            
            // 简化的IP检查实现
            if (url.pathname.includes('/api/check-ip')) {
              const ip = url.searchParams.get('ip');
              if (!ip) {
                return Response.json({ error: 'IP parameter required' }, { status: 400 });
              }
              
              try {
                const token = request.headers.get('X-IPInfo-Token') || env.IPINFO_TOKEN;
                const headers = token ? { 'Authorization': `Bearer ${token}` } : {};
                
                const response = await fetch(`https://ipinfo.io/${ip}/json`, { headers });
                const data = await response.json();
                
                if (response.ok) {
                  const isPure = !data.privacy?.hosting && !data.privacy?.vpn && !data.privacy?.proxy;
                  return Response.json({
                    ip: data.ip,
                    country: data.country,
                    city: data.city,
                    org: data.org,
                    isPure,
                    privacy: data.privacy || {},
                    timestamp: new Date().toISOString()
                  }, {
                    headers: { 'Access-Control-Allow-Origin': '*' }
                  });
                } else {
                  return Response.json({ error: 'Failed to fetch IP info' }, { status: 500 });
                }
              } catch (error) {
                return Response.json({ error: error.message }, { status: 500 });
              }
            }
            
            return Response.json({ error: 'API endpoint not found' }, { status: 404 });
          }
          EOF

      - name: Deploy to Cloudflare Pages
        run: |
          wrangler pages deploy public --project-name ip-purity-checker --compatibility-date 2024-01-01
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 部署后测试
  post-deployment-test:
    needs: [deploy-vercel]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-vercel.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          pip install requests

      - name: Wait for deployment
        run: sleep 30

      - name: Test deployment
        run: |
          # 从Vercel获取部署URL（这里需要根据实际情况调整）
          DEPLOYMENT_URL="https://ip-purity-checker.vercel.app"
          
          echo "Testing deployment at: $DEPLOYMENT_URL"
          
          # 测试首页
          if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
            echo "✅ Homepage test passed"
          else
            echo "❌ Homepage test failed"
            exit 1
          fi
          
          # 测试API
          API_RESPONSE=$(curl -s "$DEPLOYMENT_URL/api/check-ip?ip=8.8.8.8")
          if echo "$API_RESPONSE" | grep -q '"ip"'; then
            echo "✅ API test passed"
            echo "Response: $API_RESPONSE"
          else
            echo "❌ API test failed"
            echo "Response: $API_RESPONSE"
            exit 1
          fi
        continue-on-error: true

  # 通知
  notify:
    needs: [deploy-vercel, deploy-cloudflare, post-deployment-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 部署总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-vercel.result }}" == "success" ]; then
            echo "✅ **Vercel部署**: 成功" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **访问地址**: https://ip-purity-checker.vercel.app" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Vercel部署**: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-cloudflare.result }}" == "success" ]; then
            echo "✅ **Cloudflare Pages部署**: 成功" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-cloudflare.result }}" == "failure" ]; then
            echo "❌ **Cloudflare Pages部署**: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Web界面功能" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 单IP检测" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 批量IP检测" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 订阅链接检测" >> $GITHUB_STEP_SUMMARY
          echo "- ⚙️ Clash配置生成" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 CSV报告下载" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 响应式设计" >> $GITHUB_STEP_SUMMARY
